# Basic Settings
set ignorecase true
set sortby natural
set icons true
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id
set ifs "\n"


#set reverse true # reverse sorting order

# Commands

# trash command with confirmation
cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

# extrat compress files
cmd extract ${{
    set -f
    archive="${fx%.*}"
    mkdir "$archive"
    cd "$archive"
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip -O gbk $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# custom paste command using rsync/mv
cmd pastersync &{{
    load=$(cat ~/.local/share/lf/files)
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        rsync -av --ignore-existing --progress $list . \
        | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
        | while read line; do
            lf -remote "send $id echo $line"
        done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(cat $HOME/.config/shell/bm-dirs | fzf )" &&
	for x in $fx; do
        echo "$x"
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(cat $HOME/.config/shell/bm-dirs | fzf )" &&
	for x in $fx; do
        echo "$x"
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) moved." "File(s) moved to $dest."
}}

cmd sendtoomv ${{
    rsync -avr --progress $fs soeren@omv:/srv/dev-disk-by-uuid-93250918-f8ee-4a69-99ef-ee5d8fd50fe8/media/temp/
    }}

cmd sendtoraspi01 ${{
    rsync -avr --progress $fs soeren@raspi01:/home/soeren/
    }}
cmd openguife ${{
    nemo $PWD
    }}

cmd bulkrename $vidir

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

#Combining fzf with ripgrep, you can interactively search in the contents of files under the current directory and select a file from the results:
cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
# Bindings
# Remove some defaults
map y
map d
map p

# Basic functions
map yy copy
map dd cut
map pp paste
map pr pastersync
map D delete
map E extract
map Z push :zip<space>
map C copyto
map M moveto
map B bulkrename
map A rename
map <c-n> push :mkdir<space>
map xomv sendtoomv
map xrpi1 sendtoraspi01
map e $nvim "$f"
map <c-s> :fzf_search
# Navigation
map gsc cd ~/sciebo
map gdl cd ~/Downloads
map gdd cd ~/Schreibtisch
map gdc cd ~/Dokumente
map gim cd ~/Bilder
map gr cd /
map gM cd /mnt
map gme cd /media
map gsa cd ~/.sabnzbd/complete
map gmo cd ~/.sabnzbd/movies
map gtv cd ~/.sabnzbd/tv
map ge openguife
